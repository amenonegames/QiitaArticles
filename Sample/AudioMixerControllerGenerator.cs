using UnityEngine;
using UnityEditor;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Mono.Cecil.Cil;
using Sirenix.Utilities.Editor;

namespace Utils.Editor
{
    public class AudioMixerControllerGenerator  
    {
        private string[] _properties;
        private bool requireAsyncMethod = true;
        private string classNameSpace = @"
using System.Threading;
using Cysharp.Threading.Tasks;
using Data.Utils;
using UnityEngine;
using UnityEngine.Audio;
";

        private string interfaceNamSpace = @"
using System.Threading;
using Cysharp.Threading.Tasks;
using Data.Utils;
using UnityEngine;
using UnityEngine.Audio;
using ViewRoot.Interface;
";
            
        private string interfaceName = "IAudioMixerControllable";
        private string className = "AudioMixerController";
        private string interfaceFilePath = $"Assets/Scripts/ViewAbstract/ViewRoot/{interfaceName}.cs";
        
        
        public AudioMixerControllerGenerator(string[] properties)
        {
            _properties = properties;
        }

        public void Generate()
        {
            string thisClassName = "";
            var declaringType = MethodBase.GetCurrentMethod()?.DeclaringType;
            if (declaringType != null)
            {
                thisClassName = declaringType?.Name;
            }
            
            var interfaceFilePath = $"Assets/Scripts/ViewAbstract/ViewRoot/{interfaceName}.cs";
            var interfaceCode = GenerateInterfaceString(interfaceName, thisClassName);
            File.WriteAllText(interfaceFilePath, interfaceCode);
            
            // 作成するアセットのパス
            var classFilePath = $"Assets/Scripts/ViewRoot/Sound/{className}.cs";
            var classCode = GenerateClassString(className, interfaceName, thisClassName);
            // アセット(.cs)を作成する 既に存在していた場合は上書きする
            File.WriteAllText(classFilePath, classCode);
            
            // 変更があったアセットをインポートする(UnityEditorの更新)
            AssetDatabase.Refresh();
        }

        private string GenerateClassString(string className, string interfaceName, string thisClassName)
        {
            // @""とすることで、複数行を書ける
            // ただ「"」は「""」として書きます
            StringBuilder code = new();
            string nameSpace = "View.Sound";

            code.Append(
                @$"
{classNameSpace}

namespace {nameSpace}
{{
        /// <summary>
        /// This class is generated by script : {thisClassName}
        /// </summary>
        public class {className} :{interfaceName}
        {{
            private readonly AudioMixer _audioMixer;
"
            );

            foreach (var property in _properties)
            {
                code.Append
                (
                    @$"
            private readonly float _original{property};
"
                );
            }

            code.Append
            (
                @$"
            private ForceCompleteToken _fct;

            public {className}(AudioMixer audioMixer)
            {{
                _audioMixer = audioMixer;
"
            );

            foreach (var property in _properties)
            {
                code.Append
                (@$"
                _audioMixer.GetFloat(""{property}"", out _original{property});
"
                );
            }

            code.Append(@"

            }"
            );

            foreach (var property in _properties)
            {

                code.Append($@"
            public void {property}Change(float value)
            {{
                _audioMixer.SetFloat(""{property}"", value);
            }}

            public void {property}Reset(float value)
            {{
                _audioMixer.SetFloat(""{property}"", _original{property});
            }}
"
                );

                if (!requireAsyncMethod) continue;

                code.Append
                (@$"
            public async UniTask {property}ChangeAsync(float value, CancellationToken token, float duration)
            {{
                await _audioMixer.EaseProperty(""{property}"", value, duration, EaseValue.eEase.Linear, token, _fct);
            }}

            public async UniTask {property}ResetAsync(CancellationToken token, float duration)
            {{
                await _audioMixer.EaseProperty(""{property}"", _original{property}, duration, EaseValue.eEase.Linear, token,
                    _fct);
            }}
"
                );

            }

            code.Append(@"
        }
}");

            return code.ToString();
        }

        private string GenerateInterfaceString(string interfaceName, string thisClassName)
        {
            // @""とすることで、複数行を書ける
            // ただ「"」は「""」として書きます
            StringBuilder code = new();
            string nameSpace = "ViewRoot.Interface";

            code.Append(
                @$"
{interfaceNamSpace}

namespace {nameSpace}
{{
        /// <summary>
        /// This class is generated by script : {thisClassName}
        /// </summary>
        public interface {interfaceName}
        {{
"
            );

            foreach (var property in _properties)
            {
                code.Append(@$"
            void {property}Change(float value);
            void {property}Reset(float value);
");

                if (!requireAsyncMethod) continue;
                code.Append
                (@$"
            UniTask {property}ChangeAsync(float value, CancellationToken token, float duration);
            UniTask {property}ResetAsync(CancellationToken token, float duration);
"
                );

            }

            code.Append(@"
        }
}");

            return code.ToString();
        }
        
    }

}
